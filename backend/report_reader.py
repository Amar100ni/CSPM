#!/usr/bin/env python3
"""
report_reader.py
Reads and parses the compliance report (report.json) generated by the Java engine.
This module can be run standalone or imported into Flask (app.py).
"""

import json
import os
import logging

# ---------- Configuration ----------
REPORT_FILE = r"D:\EIS\CSPM PROJECT\report_11.json"
LOG_FORMAT = "%(asctime)s - %(levelname)s - %(message)s"
logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
logger = logging.getLogger("report_reader")


# ---------- Core Function ----------
def read_report(path: str = REPORT_FILE):
    if not os.path.exists(path):
        logger.error(f"Report file '{path}' not found. Make sure Java engine has generated it.")
        return None

    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)

        compliance_score = data.get("Compliance_Score", None)
        details = {k: v for k, v in data.items() if k != "Compliance_Score"}

        report_summary = {
            "Compliance_Score": compliance_score,
            "Details": details
        }

        logger.info("Successfully loaded report.json â€” Compliance Score: %s", compliance_score)
        return report_summary

    except json.JSONDecodeError as e:
        logger.error("JSON Decode Error in %s: %s", path, e)
        return None
    except Exception as e:
        logger.exception("Unexpected error while reading report file: %s", e)
        return None


# ---------- Standalone Test ----------
if __name__ == "__main__":
    logger.info("Testing report_reader.py...")
    result = read_report()
    if result:
        print("\n=== Compliance Report Summary ===")
        print("Compliance Score:", result["Compliance_Score"])
        print("\nDetails:")
        print(json.dumps(result["Details"], indent=2))
    else:
        print("No valid report found.")
